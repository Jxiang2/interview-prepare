{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ts/./src/index.ts","webpack://ts/./src/1.funcOverload.ts","webpack://ts/./src/2.generics.ts","webpack://ts/./src/3.utilityTypes.ts","webpack://ts/./src/4.oop.ts","webpack://ts/./src/5.mappedTypes.ts","webpack://ts/./src/6.typeChecks.ts","webpack://ts/./src/7.mixins.ts","webpack://ts/./src/8.interfaces.ts","webpack://ts/webpack/bootstrap"],"sourcesContent":["import { parseCoordinate } from \"./1.funcOverload\";\nimport {\n  myFunc,\n  myFunc1,\n  isInstanceOfPerson,\n  rankedItemList,\n  simpleState,\n} from \"./2.generics\";\nimport { createObjects, PersonWithFullName } from \"./3.utilityTypes\";\nimport { PersistentMemoryDB } from \"./4.oop\";\nimport { listenToObj } from \"./5.mappedTypes\";\nimport { isInstanceOfA } from \"./6.typeChecks\";\nimport {\n  CreateDumpableDatabase,\n  CreateSimpleMemoeryDatabase,\n} from \"./7.mixins\";\nimport { mixedBase } from \"./8.interfaces\";\n\nconsole.log(\"start\");\nconsole.log(parseCoordinate);\nconsole.log(myFunc, myFunc1, isInstanceOfPerson, rankedItemList, simpleState);\nconsole.log(createObjects, PersonWithFullName);\nconsole.log(PersistentMemoryDB);\nconsole.log(listenToObj);\nconsole.log(isInstanceOfA);\nconsole.log(CreateDumpableDatabase, CreateSimpleMemoeryDatabase);\nconsole.log(mixedBase);\nconsole.log(\"end\");\n","interface Coordinate {\n  x: number;\n  y: number;\n}\n\ntype CoordinateKey = keyof Coordinate;\n\n// optional type declarations **\nfunction parseCoordinate(str: string): Coordinate;\nfunction parseCoordinate(obj: Coordinate): Coordinate;\nfunction parseCoordinate(x: number, y: number): Coordinate;\n// optional type declarations **\n\nfunction parseCoordinate(arg1: unknown, arg2?: unknown): Coordinate {\n  let coord: Coordinate = {} as Coordinate;\n\n  if (typeof arg1 === \"string\") {\n    (arg1 as string).split(\",\").forEach((str) => {\n      const [k, v] = str.split(\":\");\n      coord[k as CoordinateKey] = parseInt(v, 10);\n    });\n  } else if (typeof arg1 === \"object\") {\n    coord = {\n      ...(arg1 as Coordinate),\n    };\n  } else {\n    coord = {\n      x: arg1 as number,\n      y: arg2 as number,\n    };\n  }\n\n  return coord;\n}\n\nconsole.log(parseCoordinate(10, 20));\nconsole.log(parseCoordinate({ x: 52, y: 35 }));\nconsole.log(parseCoordinate(\"x:12,y:22\"));\n\nexport { parseCoordinate };\n","// knowledge checkpoint: TS tuple, generics, Closure\nconst simpleState = <T>(initial: T): [() => T, (v: T) => void] => {\n  let val: T = initial;\n  return [\n    () => val,\n    (v: T) => {\n      val = v;\n    },\n  ];\n};\n\nconst [strGetter, strSetter] = simpleState<string | null>(null);\nconst [numGetter, numSetter] = simpleState(1);\nconsole.log(strGetter());\nconsole.log(numGetter());\nstrSetter(\"goodbye\");\nconsole.log(strGetter());\nconsole.log(numGetter());\n\n// knowledge checkpoint: generics\ninterface ItemWithRank<T> {\n  item: T;\n  rank: number;\n}\n\nconst ranker = <T>(items: T[], rankAlgo: (v: T) => number): T[] => {\n  const itemsWithRank: Array<ItemWithRank<T>> = items.map((item) => ({\n    item,\n    rank: rankAlgo(item),\n  }));\n\n  itemsWithRank.sort((a, b) => a.rank - b.rank);\n\n  return itemsWithRank.map((itemsWithRank) => itemsWithRank.item);\n};\n\nconst strListToTest = [\"XxxxxxxxxX\", \"hello\", \"world!\", \"xjy\"];\n\nconst rankedItemList: Array<string> = ranker<string>(\n  strListToTest,\n  (str) => str.length,\n);\nconsole.log(rankedItemList);\n\n//  knowledge checkpoint: TS generics, keyof\n// 1\nconst pluck = <DataType, KeyType extends keyof DataType>(\n  items: Array<DataType>,\n  key: KeyType,\n): Array<DataType[KeyType]> => {\n  return items.map((item) => item[key]);\n};\n\ninterface Dog {\n  name: string;\n  age: number;\n}\n\nconst dogs: Array<Dog> = [\n  { name: \"Mimi\", age: 12 },\n  { name: \"LG\", age: 13 },\n];\n\nconsole.log(pluck<Dog, \"age\">(dogs, \"age\"));\nconsole.log(pluck<Dog, \"name\">(dogs, \"name\"));\n\n// 2\ninterface BaseEvent {\n  time: number;\n  user: string;\n}\n\ninterface EventMap {\n  addToCart: BaseEvent & { quantity: number; productID: string };\n  checkout: BaseEvent;\n}\n\nconst sendEvent = <Name extends keyof EventMap>(\n  name: Name,\n  data: EventMap[Name],\n): void => {\n  console.log([name, data]);\n};\n\nsendEvent(\"addToCart\", {\n  time: 10,\n  user: \"xjy\",\n  quantity: 12,\n  productID: \"e32d2d2e23\",\n});\n\nsendEvent(\"checkout\", {\n  time: 10,\n  user: \"xjy1\",\n});\n\n// 3 generic function types vs generic types of function\ninterface Person {\n  id: string; // unique identifier\n  name: string;\n  age: number;\n}\nconst isInstanceOfPerson = (obj: unknown): obj is Person =>\n  typeof (obj as Person).id === \"string\" &&\n  typeof (obj as Person).name === \"string\" &&\n  typeof (obj as Person).age === \"number\";\n\n// 3.0 (prerequisite) functions with generic arguments\nconst addUID = <T extends object>(obj: T) => {\n  const uid = Math.floor(Math.random() * 100);\n  return { ...obj, uid };\n};\nconsole.log(addUID({ name: \"xjy\" }));\n\n// 3.1 generic type of functions\ntype FC<Props> = (props: Props) => any; // declare\n\nconst myFunc: FC<Person> = ({ age, name }: Person) => {\n  // implement (id, name) are destructed from passed person\n  console.log(age.toLocaleString());\n  console.log(name.toLocaleUpperCase());\n};\n\nmyFunc({\n  // use\n  id: \"1wec3212\",\n  name: \"xjy\",\n  age: 22,\n});\n\n// 3.2 generic function types\ntype FC1 = <Props>(props: Props) => any; // declare\n\nconst myFunc1: FC1 = <Props>(props: Props) => {\n  // implement\n  if (isInstanceOfPerson(props)) {\n    const { age, name } = props;\n    console.log(age.toLocaleString());\n    console.log(name.toLocaleUpperCase());\n  } else {\n    console.log(\"type check failed\");\n  }\n};\n\nmyFunc1({\n  // use\n  id: \"1wec3212\",\n  name: \"xjy\",\n  age: 22,\n});\n\nmyFunc1<Dog>({\n  // use\n  name: \"dingDing\",\n  age: 6,\n});\n\nexport { myFunc, myFunc1, isInstanceOfPerson, rankedItemList, simpleState };\n\n// 3.3 practice\n// knowledge checkpoint: TS generics, TS type conversion, reduce((acc, v)=>{...do sth}, initAcc)\n// use reduce method to simulate others\n\nfunction myForEach<T>(items: T[], forEachFunc: (v: T) => void): void {\n  items.reduce((acc, v) => {\n    forEachFunc(v);\n    return undefined;\n  }, undefined);\n}\n\nconsole.log(myForEach([1, 2, 3, 4, 5], (v) => console.log(`for each ${v}`)));\n\nfunction myFilter<T>(items: T[], filterFunc: (v: T) => boolean): T[] {\n  return items.reduce((a, v) => (filterFunc(v) ? [...a, v] : a), [] as T[]);\n}\n\nconsole.log(myFilter([1, 2, 3, 4, 5, 6, 7], (v) => v % 2 === 0));\n\nfunction myMap<T, K>(values: T[], mapFunc: (val: T) => K): K[] {\n  return values.reduce((a, v) => [...a, mapFunc(v)], [] as K[]);\n}\n\nconsole.log(myMap([1, 2, 3], (val) => (val * 10).toString()));\n","// PART 1: Partial<T>, Required<T>, Pick<T>, Record<K, V>, ReadOnly<T>\ninterface MyUser {\n  name: string;\n  id: string;\n  emial?: string;\n}\n\n// Partial<T>: take a type (interface) T, make it's all attributes optional\nconst mergeOptional = (user: MyUser, overrides: Partial<MyUser>): MyUser => {\n  return {\n    ...user,\n    ...overrides,\n  };\n};\n\nconsole.log(\n  mergeOptional(\n    {\n      name: \"xjy\",\n      id: \"foo\",\n      emial: \"xxx.xxx@xx.com\",\n    },\n    {\n      id: \"deee\",\n      name: \"jxiang\",\n    },\n  ),\n);\n\n// Required<T>: take a type (interface) T, make it's all attrubutes required\nconst mergeRequired = (user: MyUser, overrides: Required<MyUser>): MyUser => {\n  return {\n    ...user,\n    ...overrides,\n  };\n};\n\nconsole.log(\n  mergeRequired(\n    { name: \"xjy\", id: \"foo\", emial: \"xxx.xxx@xx.com\" },\n    { id: \"deee\", name: \"jxiang\", emial: \"jxiang2@mcgill.ca\" },\n  ),\n);\n\n// Pick<T, Keys>: take a type (interface) T, Pick the selected keys using | operator,\n// the requiredness of original attributes will be restored\ntype JustEmailAndName = Pick<MyUser, \"emial\" | \"name\">;\nconst meMe: JustEmailAndName = {\n  name: \"xjy\",\n};\nconsole.log(meMe);\n\ntype MyPick<T, K extends keyof T> = {\n  [P in K]: T[P];\n};\ntype Point2D = MyPick<{ x: number; y: number; z: number }, \"x\" | \"z\">;\n\n// Record<string, MyUser>\nconst mapById = (users: MyUser[]): Record<string, MyUser> => {\n  return users.reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur.id]: cur,\n    };\n  }, {});\n};\n\nconst idMap: Record<string, MyUser> = mapById([\n  { id: \"foo\", name: \"Mr. Foo\" },\n  { id: \"baz\", name: \"Mr. Baz\" },\n]);\n\nconsole.log(idMap);\n\n// ReadOnly<T>\ninterface Cat {\n  name: string;\n  breed: string;\n}\n\nconst rc: Readonly<Cat> = {\n  name: \"dingding\",\n  breed: \"teddy bear\",\n};\n// rc.name = 'cwec';\n\n// PART 2: Parameters<Type>, ConstructorParameters<Type>, ReturnType<Type>, InstanceType<T>\ntype Name = {\n  first: string;\n  last: string;\n};\n\n// Parameters<Type> & ReturnType<Type>\nfunction addFullName(name: Name): Name & { fullName: string } {\n  return {\n    ...name,\n    fullName: `${name.first} ${name.last}`,\n  };\n}\n\nfunction permuteRows<T extends (...args: any[]) => any>( // typpe of generic func\n  iteratorFunc: T,\n  data: Array<Parameters<T>[0]>,\n): ReturnType<T>[] {\n  return data.map(iteratorFunc);\n}\n\nconsole.log(\n  permuteRows(addFullName, [\n    { first: \"1\", last: \"1\" },\n    { first: \"2\", last: \"2\" },\n    { first: \"3\", last: \"3\" },\n  ]),\n);\n\n// ConstructorParameters<Type> & InstanceType<T>\nclass PersonWithFullName {\n  constructor(public name: Name) {}\n\n  get fullName() {\n    return `${this.name.first} ${this.name.last}`;\n  }\n}\n\nfunction createObjects<T extends new (...args: any[]) => any>( // typpe of generic constructors\n  objectType: T,\n  data: ConstructorParameters<T>[0][],\n): Array<InstanceType<T>> {\n  return data.map((item) => new objectType(item));\n}\n\nconsole.log(\n  createObjects(PersonWithFullName, [\n    { first: \"1\", last: \"1\" },\n    { first: \"2\", last: \"2\" },\n    { first: \"3\", last: \"3\" },\n  ]).map((obj) => obj.fullName),\n);\n\nexport { createObjects, PersonWithFullName };\n","interface Database<T, K> {\n  get(id: T): K;\n\n  set(id: T, value: K): void;\n}\n\ninterface Persistable {\n  saveToString(): string;\n\n  restoreFromString(storedState: string): void;\n}\n\ntype DBKeyType = string | number | symbol;\n\nclass InMemoryDatabase<T extends DBKeyType, K> implements Database<T, K> {\n  protected db = {} as Record<T, K>;\n\n  constructor(db?: Record<T, K>) {\n    // allow paramterized constructor\n    if (db) this.db = db;\n  }\n\n  get(id: T): K {\n    return this.db[id];\n  }\n\n  set(id: T, value: K): void {\n    this.db[id] = value;\n  }\n}\n\nclass PersistentMemoryDB<T extends DBKeyType, K>\n  extends InMemoryDatabase<T, K>\n  implements Persistable\n{\n  constructor(db?: Record<T, K>) {\n    db && super(db); // call parent constructor, to access parent FIELDS\n  }\n\n  saveToString(): string {\n    return JSON.stringify(this.db);\n  }\n\n  restoreFromString(storedState: string): void {\n    this.db = JSON.parse(storedState);\n  }\n}\n\n// tests\nconst myDB: PersistentMemoryDB<string, number> = new PersistentMemoryDB<\n  string,\n  number\n>({\n  x: 10,\n  y: 20,\n});\n\nmyDB.set(\"foo\", 22);\nconsole.log(myDB.get(\"foo\"));\n\nconst saved = myDB.saveToString();\nconsole.log(saved);\n\nmyDB.set(\"foo\", 23);\nconsole.log(myDB.get(\"foo\"));\n\nconst myDB2 = new PersistentMemoryDB<string, number>();\n\nmyDB2.restoreFromString(saved);\nconsole.log(myDB2);\n\nconsole.log(myDB2.get(\"foo\"));\n\nexport { PersistentMemoryDB };\n","interface DogInfo {\n  name: string;\n  age: number;\n}\n\ntype Listners<T> = {\n  [Property in keyof T as `on${Capitalize<string & Property>}Change`]: (\n    val: T[Property],\n  ) => void;\n};\n\nfunction listenToObj<T>(obj: T, listeners: Listners<T>): void {\n  console.log(obj);\n  console.log(listeners);\n}\n\nconst lg: DogInfo = {\n  name: \"LG\",\n  age: 13,\n};\n\nconst dogListners: Listners<DogInfo> = {\n  onNameChange: (val: string) => {\n    console.log(val);\n  },\n  onAgeChange: (val: number) => {\n    console.log(val);\n  },\n};\n\nlistenToObj<DogInfo>(lg, dogListners);\n\nexport { listenToObj };\n","// ✅ Use typeof for primitive data types\nconst myVar: string | number = \"hello world\";\n\nconsole.log(typeof myVar); // 👉️ \"string\"\n\nif (typeof myVar === \"string\") {\n  console.log(myVar.toUpperCase()); // 👉️ \"HELLO WORLD\"\n}\n\n// ✅ Use instanceof for classes\nclass Person {}\n\nconst person = new Person();\nconsole.log(person instanceof Person); // 👉️ true\n\nconst err = new Error(\"Something went wrong\");\nconsole.log(err instanceof Error); // 👉️ true\n\n// ✅ Use Array.isArray to check if array\nconsole.log(Array.isArray([1, 2, 3])); // 👉️ true\n\n// ✅ Use customised type guard functions Interface Type Check\ninterface A {\n  member: string;\n}\n\nfunction isInstanceOfA(obj: any): obj is A {\n  return typeof (obj as A).member === \"string\";\n}\n\nconst a = {\n  member: \",me\",\n};\n\nconsole.log(isInstanceOfA(a));\n\nexport { isInstanceOfA };\n","// generic mixin (generic functions that return classes)\n\nfunction CreateSimpleMemoeryDatabase<T>() {\n  return class SimpleMemoryDatabase {\n    private db: Record<string, T> = {};\n\n    set(id: string, val: T) {\n      this.db[id] = val;\n    }\n\n    get(id: string) {\n      return this.db[id];\n    }\n\n    getObject(): Record<string, T> {\n      return this.db;\n    }\n\n    hello() {\n      console.log(\"hello\");\n    }\n  };\n}\n\nconst SimpleNumberDatabase = CreateSimpleMemoeryDatabase<number>();\n\ntype DBType<Item> = {\n  set: (id: string, val: Item) => void;\n  get: (id: string) => Item;\n  getObject: () => Record<string, Item>;\n};\n\ntype NumberDBConstructor<DB extends DBType<number>> = new (\n  ...args: any[]\n) => DB;\n//  ****************  constructor(...)   => object\n\nfunction CreateDumpableDatabase<T extends NumberDBConstructor<DBType<number>>>(\n  Base: T,\n) {\n  return class Dumpable extends Base {\n    dump() {\n      console.log(this.getObject());\n    }\n  };\n}\n\nconst DumpableNumberDatabase = CreateDumpableDatabase(SimpleNumberDatabase);\nconst sdb2 = new DumpableNumberDatabase();\nsdb2.set(\"a\", 1);\nsdb2.set(\"b\", 2);\nsdb2.set(\"c\", 3);\nsdb2.dump();\n\nexport { CreateDumpableDatabase, CreateSimpleMemoeryDatabase };\n","// extends & types example\ninterface Vector1D {\n  x: number;\n}\n\ninterface Vector2D {\n  x: number;\n  y: number;\n}\n\ntype subTypeOf<T, U> = T extends U ? true : false;\n\nconst var1: subTypeOf<Vector2D, Vector1D> = true;\nconst var2: subTypeOf<Vector1D, Vector1D> = true;\nconst var3: subTypeOf<Vector1D, Vector2D> = false;\n\n// dynamic interfaces/ objects\ninterface IDynamicObj {\n  [index: string]: number;\n}\n\nconst id1: IDynamicObj = {\n  k1: 1,\n  k2: 2,\n  k3: 5,\n  helloWord: 15,\n};\nconsole.log(id1);\n\ninterface IOptionalObj {\n  id: string;\n  birthDate: Date;\n  avatar?: string;\n  tropies: string[];\n}\nconst optionalObj: IOptionalObj = {\n  id: \"3d2ce32\",\n  birthDate: new Date(Date.now()),\n  tropies: [],\n};\nconsole.log(optionalObj);\n\n// as keyword\ninterface newInterface {\n  name: string;\n  age: number;\n}\n\nconst hello: newInterface = {} as newInterface;\nhello.age = 12;\nhello.name = \"hello\";\nconsole.log(hello);\n\n// enums : 0, 1, ,2, 3, 4\nenum ResourceType {\n  BOOK,\n  AUTHOR,\n  FILM,\n  DIRECTOR,\n  PERSON,\n}\n\nconsole.log(ResourceType.AUTHOR);\n\n// & operator on 2 interfaces\ninterface Base1 {\n  name: string;\n  age: number;\n}\n\ninterface Base2 {\n  id: string;\n  isMarried: boolean;\n}\n\nexport const mixedBase: Base1 & Base2 = {\n  id: \"3r23f0jewfewf\",\n  name: \"xjy\",\n  age: 12,\n  isMarried: false,\n};\n\nconsole.log(mixedBase);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["parseCoordinate","arg1","arg2","coord","split","forEach","str","k","v","parseInt","x","y","console","log","simpleState","initial","val","strGetter","strSetter","numGetter","rankAlgo","itemsWithRank","rankedItemList","length","map","item","rank","sort","a","b","pluck","items","key","dogs","name","age","sendEvent","data","time","user","quantity","productID","obj","uid","isInstanceOfPerson","id","Math","floor","random","myFunc","toLocaleString","toLocaleUpperCase","mapFunc","myFunc1","props","reduce","acc","forEachFunc","undefined","filterFunc","toString","overrides","emial","idMap","cur","first","last","fullName","this","createObjects","objectType","PersonWithFullName","db","saveToString","JSON","stringify","restoreFromString","storedState","parse","get","set","value","PersistentMemoryDB","myDB","saved","myDB2","listenToObj","listeners","onNameChange","onAgeChange","toUpperCase","person","Person","err","Error","isInstanceOfA","member","Array","isArray","CreateSimpleMemoeryDatabase","getObject","hello","SimpleNumberDatabase","CreateDumpableDatabase","Base","dump","sdb2","k1","k2","k3","helloWord","optionalObj","birthDate","Date","now","tropies","ResourceType","AUTHOR","mixedBase","isMarried","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"sourceRoot":""}