{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ts/./src/index.ts","webpack://ts/./src/1.funcOverload.ts","webpack://ts/./src/2.generics.ts","webpack://ts/./src/3.utilityTypes.ts","webpack://ts/./src/4.oop.ts","webpack://ts/./src/5.mappedTypes.ts","webpack://ts/./src/6.typeChecks.ts","webpack://ts/./src/7.mixins.ts","webpack://ts/webpack/bootstrap"],"sourcesContent":["import { parseCoordinate } from \"./1.funcOverload\";\nimport {\n  myFunc,\n  myFunc1,\n  isInstanceOfPerson,\n  rankedItemList,\n  simpleState,\n} from \"./2.generics\";\nimport { createObjects, PersonWithFullName } from \"./3.utilityTypes\";\nimport { PersistentMemoryDB } from \"./4.oop\";\nimport { listenToObj } from \"./5.mappedTypes\";\nimport { isInstanceOfA } from \"./6.typeChecks\";\nimport {\n  CreateDumpableDatabase,\n  CreateSimpleMemoeryDatabase,\n} from \"./7.mixins\";\n\nconsole.log(\"start\");\nconsole.log(parseCoordinate);\nconsole.log(myFunc, myFunc1, isInstanceOfPerson, rankedItemList, simpleState);\nconsole.log(createObjects, PersonWithFullName);\nconsole.log(PersistentMemoryDB);\nconsole.log(listenToObj);\nconsole.log(isInstanceOfA);\nconsole.log(CreateDumpableDatabase, CreateSimpleMemoeryDatabase);\nconsole.log(\"end\");\n","type CoordinateKey = \"x\" | \"y\";\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\n// optional type declarations **\nfunction parseCoordinate(str: string): Coordinate;\nfunction parseCoordinate(obj: Coordinate): Coordinate;\nfunction parseCoordinate(x: number, y: number): Coordinate;\n// optional type declarations **\n\nfunction parseCoordinate(arg1: unknown, arg2?: unknown): Coordinate {\n  let coord: Coordinate = {} as Coordinate;\n\n  if (typeof arg1 === \"string\") {\n    (arg1 as string).split(\",\").forEach((str) => {\n      const [k, v] = str.split(\":\");\n      coord[k as CoordinateKey] = parseInt(v, 10);\n    });\n  } else if (typeof arg1 === \"object\") {\n    coord = {\n      ...(arg1 as Coordinate),\n    };\n  } else {\n    coord = {\n      x: arg1 as number,\n      y: arg2 as number,\n    };\n  }\n\n  return coord;\n}\n\nconsole.log(parseCoordinate(10, 20));\nconsole.log(parseCoordinate({ x: 52, y: 35 }));\nconsole.log(parseCoordinate(\"x:12,y:22\"));\n\nexport { parseCoordinate };\n","import { type } from \"os\";\n\n// knowledge checkpoint: TS tuple, generics, Closure\nfunction simpleState<T>(initial: T): [() => T, (v: T) => void] {\n  let val: T = initial;\n  return [\n    () => val,\n    (v: T) => {\n      val = v;\n    },\n  ];\n}\n\nconst [strgetter, strsetter] = simpleState<string | null>(null);\nconst [numgetter, numsetter] = simpleState(1);\nconsole.log(strgetter());\nconsole.log(numgetter());\nstrsetter(\"goodbye\");\nconsole.log(strgetter());\nconsole.log(numgetter());\n\n// knowledge checkpoint: generics\ninterface ItemWithRank<T> {\n  item: T;\n  rank: number;\n}\n\nfunction ranker<T>(items: Array<T>, rankAlgo: (v: T) => number): Array<T> {\n  const itemsWithRank: Array<ItemWithRank<T>> = items.map((item) => ({\n    item,\n    rank: rankAlgo(item),\n  }));\n\n  itemsWithRank.sort((a, b) => a.rank - b.rank);\n\n  return itemsWithRank.map((itemsWithRank) => itemsWithRank.item);\n}\n\nconst strsToTest = [\"XxxxxxxxxX\", \"hello\", \"world!\", \"xjy\"];\n\nconst rankedItemList: Array<string> = ranker<string>(\n  strsToTest,\n  (str) => str.length,\n);\nconsole.log(rankedItemList);\n\n//  knowledge checkpoint: TS generics, keyof\n// 1\nfunction pluck<DataType, KeyType extends keyof DataType>(\n  items: Array<DataType>,\n  key: KeyType,\n): Array<DataType[KeyType]> {\n  return items.map((item) => item[key]);\n}\n\ninterface Dog {\n  name: string;\n  age: number;\n}\n\nconst dogs: Array<Dog> = [\n  { name: \"Mimi\", age: 12 },\n  { name: \"LG\", age: 13 },\n];\n\nconsole.log(pluck<Dog, \"age\">(dogs, \"age\"));\nconsole.log(pluck<Dog, \"name\">(dogs, \"name\"));\n\n// 2\ninterface BaseEvent {\n  time: number;\n  user: string;\n}\n\ninterface EventMap {\n  addToCart: BaseEvent & { quantity: number; productID: string };\n  checkout: BaseEvent;\n}\n\nfunction sendEvent<Name extends keyof EventMap>(\n  name: Name,\n  data: EventMap[Name],\n): void {\n  console.log([name, data]);\n}\n\nsendEvent(\"addToCart\", {\n  time: 10,\n  user: \"xjy\",\n  quantity: 12,\n  productID: \"e32d2d2e23\",\n});\n\n// 3 generic function types vs generic types of function\ninterface Person {\n  id: string; // unique identifier\n  name: string;\n  age: number;\n}\nconst isInstanceOfPerson = (obj: any): obj is Person =>\n  typeof (obj as Person).id === \"string\" &&\n  typeof (obj as Person).name === \"string\" &&\n  typeof (obj as Person).age === \"number\";\n\n// 3.1 generic type of functions\ntype FC<Props> = (props: Props) => any; // declare\n\nconst myFunc: FC<Person> = ({ age, name }: Person) => {\n  // implement (id, name) are destructed from passed person\n  console.log(age.toLocaleString());\n  console.log(name.toLocaleUpperCase());\n};\n\nmyFunc({\n  // use\n  id: \"1wec3212\",\n  name: \"xjy\",\n  age: 22,\n});\n\n// 3.2 generic function types\ntype FC1 = <Props>(props: Props) => any; // declare\n\nconst myFunc1: FC1 = <Props>(props: Props) => {\n  // implement\n  if (isInstanceOfPerson(props)) {\n    const { age, name } = props;\n    console.log(age.toLocaleString());\n    console.log(name.toLocaleUpperCase());\n  } else {\n    console.log(\"type check failed\");\n  }\n};\n\nmyFunc1<Person>({\n  // use\n  id: \"1wec3212\",\n  name: \"xjy\",\n  age: 22,\n});\n\nmyFunc1<Dog>({\n  // use\n  name: \"dingding\",\n  age: 6,\n});\n\nexport { myFunc, myFunc1, isInstanceOfPerson, rankedItemList, simpleState };\n","// PART 1: Partial<T>, Required<T>, Pick<T>, Record<K, V>, ReadOnly<T>\ninterface MyUser {\n  name: string;\n  id: string;\n  emial?: string;\n}\n\n// Partial<T>: take a type (interface) T, make it's all attributes optional\nconst mergeOptional = (user: MyUser, overrides: Partial<MyUser>): MyUser => {\n  return {\n    ...user,\n    ...overrides,\n  };\n};\n\nconsole.log(\n  mergeOptional(\n    {\n      name: \"xjy\",\n      id: \"foo\",\n      emial: \"xxx.xxx@xx.com\",\n    },\n    {\n      id: \"deee\",\n      name: \"jxiang\",\n    },\n  ),\n);\n\n// Required<T>: take a type (interface) T, make it's all attrubutes required\nconst mergeRequired = (user: MyUser, overrides: Required<MyUser>): MyUser => {\n  return {\n    ...user,\n    ...overrides,\n  };\n};\n\nconsole.log(\n  mergeRequired(\n    {\n      name: \"xjy\",\n      id: \"foo\",\n      emial: \"xxx.xxx@xx.com\",\n    },\n    {\n      id: \"deee\",\n      name: \"jxiang\",\n      emial: \"jxiang2@mcgill.ca\",\n    },\n  ),\n);\n\n// Pick<T, Keys>: take a type (interface) T, Pick the selected keys using | operator,\n// the requiredness of original attributes will be restored\ntype JustEmailAndName = Pick<MyUser, \"emial\" | \"name\">;\nconst meMe: JustEmailAndName = {\n  name: \"xjy\",\n};\nconsole.log(meMe);\n\ntype MyPick<T, K extends keyof T> = {\n  [P in K]: T[P];\n};\ntype Point2D = MyPick<{ x: number; y: number; z: number }, \"x\" | \"z\">;\n\n// Record<string, MyUser>\nconst mapById = (users: MyUser[]): Record<string, MyUser> => {\n  return users.reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur.id]: cur,\n    };\n  }, {});\n};\n\nconst idMap: Record<string, MyUser> = mapById([\n  { id: \"foo\", name: \"Mr. Foo\" },\n  { id: \"baz\", name: \"Mr. Baz\" },\n]);\n\nconsole.log(idMap);\n\n// ReadOnly<T>\ninterface Cat {\n  name: string;\n  breed: string;\n}\n\nconst rc: Readonly<Cat> = {\n  name: \"dingding\",\n  breed: \"teddy bear\",\n};\n// rc.name = 'cwec';\n\n// PART 2: Parameters<Type>, ConstructorParameters<Type>, ReturnType<Type>, InstanceType<T>\ntype Name = {\n  first: string;\n  last: string;\n};\n\n// Parameters<Type> & ReturnType<Type>\nfunction addFullName(name: Name): Name & { fullName: string } {\n  return {\n    ...name,\n    fullName: `${name.first} ${name.last}`,\n  };\n}\n\nfunction permuteRows<T extends (...args: any[]) => any>( // typpe of generic func\n  iteratorFunc: T,\n  data: Array<Parameters<T>[0]>,\n): ReturnType<T>[] {\n  return data.map(iteratorFunc);\n}\n\nconsole.log(\n  permuteRows(addFullName, [\n    { first: \"1\", last: \"1\" },\n    { first: \"2\", last: \"2\" },\n    { first: \"3\", last: \"3\" },\n  ]),\n);\n\n// ConstructorParameters<Type> & InstanceType<T>\nclass PersonWithFullName {\n  constructor(public name: Name) {}\n\n  get fullName() {\n    return `${this.name.first} ${this.name.last}`;\n  }\n}\n\nfunction createObjects<T extends new (...args: any[]) => any>( // typpe of generic constructors\n  objectType: T,\n  data: ConstructorParameters<T>[0][],\n): Array<InstanceType<T>> {\n  return data.map((item) => new objectType(item));\n}\n\nconsole.log(\n  createObjects(PersonWithFullName, [\n    { first: \"1\", last: \"1\" },\n    { first: \"2\", last: \"2\" },\n    { first: \"3\", last: \"3\" },\n  ]).map((obj) => obj.fullName),\n);\n\nexport { createObjects, PersonWithFullName };\n","interface Database<T, K> {\n  get(id: T): K;\n\n  set(id: T, value: K): void;\n}\n\ninterface Persistable {\n  saveToString(): string;\n\n  restoreFromString(storedState: string): void;\n}\n\ntype DBKeyType = string | number | symbol;\n\nclass InMemoryDatabase<T extends DBKeyType, K> implements Database<T, K> {\n  protected db = {} as Record<T, K>;\n\n  constructor (db?: Record<T, K>) {\n    // allow paramterized constructor\n    if (db) this.db = db;\n  }\n\n  get(id: T): K {\n    return this.db[id];\n  }\n\n  set(id: T, value: K): void {\n    this.db[id] = value;\n  }\n}\n\nclass PersistentMemoryDB<T extends DBKeyType, K> extends InMemoryDatabase<T, K> implements Persistable {\n  constructor (db?: Record<T, K>) {\n    db && super(db); // call parent constructor, to access parent FIELDS\n  }\n\n  saveToString(): string {\n    return JSON.stringify(this.db);\n  }\n\n  restoreFromString(storedState: string): void {\n    this.db = JSON.parse(storedState);\n  }\n}\n\n// tests\nconst myDB = new PersistentMemoryDB<string, number>({\n  x: 10,\n  y: 20,\n});\n\nmyDB.set(\"foo\", 22);\nconsole.log(myDB.get(\"foo\"));\n\nconst saved = myDB.saveToString();\nconsole.log(saved);\n\nmyDB.set(\"foo\", 23);\nconsole.log(myDB.get(\"foo\"));\n\nconst myDB2 = new PersistentMemoryDB<string, number>();\n\nmyDB2.restoreFromString(saved);\nconsole.log(myDB2);\n\nconsole.log(myDB2.get(\"foo\"));\n\nexport { PersistentMemoryDB };\n","interface DogInfo {\n  name: string;\n  age: number;\n}\n\ntype Listners<T> = { [Property in keyof T as `on${Capitalize<string & Property>}Change`]: (\n  val: T[Property],\n) => void;\n};\n\nfunction listenToObj<T>(obj: T, listeners: Listners<T>): void {\n  console.log(obj);\n  console.log(listeners);\n}\n\nconst lg: DogInfo = {\n  name: \"LG\",\n  age: 13,\n};\n\nconst dogListners: Listners<DogInfo> = {\n  onNameChange: (val: string) => {\n    console.log(val);\n  },\n  onAgeChange: (val: number) => {\n    console.log(val);\n  },\n};\n\nlistenToObj<DogInfo>(lg, dogListners);\n\nexport { listenToObj };\n","// ✅ Use typeof for primitive data types\nconst myVar: string | number = \"hello world\";\n\nconsole.log(typeof myVar); // 👉️ \"string\"\n\nif (typeof myVar === \"string\") {\n  console.log(myVar.toUpperCase()); // 👉️ \"HELLO WORLD\"\n}\n\n// ✅ Use instanceof for classes\nclass Person {}\n\nconst person = new Person();\nconsole.log(person instanceof Person); // 👉️ true\n\nconst err = new Error(\"Something went wrong\");\nconsole.log(err instanceof Error); // 👉️ true\n\n// ✅ Use Array.isArray to check if array\nconsole.log(Array.isArray([1, 2, 3])); // 👉️ true\n\n// ✅ Use customised type guard functions Interface Type Check\ninterface A {\n  member: string;\n}\n\nfunction isInstanceOfA(obj: any): obj is A {\n  return typeof (obj as A).member === \"string\";\n}\n\nconst a = {\n  member: \",me\",\n};\n\nconsole.log(isInstanceOfA(a));\n\nexport { isInstanceOfA };\n","// generic mixin (generic functions that return classes)\n\nfunction CreateSimpleMemoeryDatabase<T>() {\n  return class SimpleMemoryDatabase {\n    private db: Record<string, T> = {};\n\n    set(id: string, val: T) {\n      this.db[id] = val;\n    }\n\n    get(id: string) {\n      return this.db[id];\n    }\n\n    getObject(): Record<string, T> {\n      return this.db;\n    }\n  };\n}\n\nconst SimpleStringDatabase = CreateSimpleMemoeryDatabase<string>();\n\ntype Constructor<T> = new (...args: any[]) => T;\n//  ****************  constructor(...)   => object\n\nfunction CreateDumpableDatabase<\n  T extends Constructor<{\n    getObject(): Record<string, any>;\n  }>,\n>(Base: T) {\n  return class Dumpable extends Base {\n    dump() {\n      console.log(this.getObject());\n    }\n  };\n}\n\nconst DumpableStringDatabase = CreateDumpableDatabase<typeof SimpleStringDatabase>(SimpleStringDatabase);\nconst sdb2 = new DumpableStringDatabase();\nsdb2.set(\"a\", \"1\");\nsdb2.set(\"b\", \"2\");\nsdb2.set(\"c\", \"3\");\nsdb2.dump();\n\nexport { CreateDumpableDatabase, CreateSimpleMemoeryDatabase };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["parseCoordinate","arg1","arg2","coord","split","forEach","str","k","v","parseInt","x","y","console","log","simpleState","initial","val","strgetter","strsetter","numgetter","rankAlgo","itemsWithRank","rankedItemList","length","map","item","rank","sort","a","b","pluck","items","key","data","dogs","name","age","time","user","quantity","productID","isInstanceOfPerson","obj","id","myFunc","toLocaleString","toLocaleUpperCase","myFunc1","props","overrides","emial","idMap","reduce","acc","cur","first","last","fullName","this","createObjects","objectType","PersonWithFullName","db","saveToString","JSON","stringify","restoreFromString","storedState","parse","get","set","value","PersistentMemoryDB","myDB","saved","myDB2","listenToObj","listeners","onNameChange","onAgeChange","toUpperCase","person","Person","err","Error","isInstanceOfA","member","Array","isArray","CreateSimpleMemoeryDatabase","getObject","SimpleStringDatabase","CreateDumpableDatabase","Base","dump","sdb2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"sourceRoot":""}