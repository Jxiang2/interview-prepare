{"version":3,"file":"bundle.js","mappings":"4QACIA,EAAuB,GAC3BA,EAAWC,KAAK,SAChBD,EAAWC,KAAK,SAChBC,QAAQC,IAAI,eAAgBH,GAI5B,IAKII,EAOAC,EAyByBC,EAPpBC,EA9BLC,EAA6B,GACjCA,EAAMP,KAAK,SACXO,EAAMP,KAAK,IACXC,QAAQC,IAAI,SAAUK,GAGtBJ,EAAM,GACNF,QAAQC,IAAIC,GACZA,EAAM,QACNF,QAAQC,IAAIC,GAQZC,EAAW,CAAEI,KAAM,MAAOC,IAAK,GAAIC,KAAM,SACzCT,QAAQC,IAAIE,GAYHE,EAIH,CAAEE,KAAM,MAAOL,IAAK,SAHxBF,QAAQC,IAAI,UAAGI,EAAKE,KAAI,cAAMF,EAAKH,WAMR,IAAAE,IAAAA,EAAA,IAC3BJ,QAAQC,IAAIS,GAAQC,OAAOP,IAS7B,IAyBqBQ,EAxBrBZ,QAAQC,IAJCS,GA4BYE,EAXA,CACnBL,KAAM,MACNC,IAAK,GACLK,MAAA,SAAMC,GACJd,QAAQC,IAAIa,IAEdC,MAAA,SAAMC,GAEJ,OADAhB,QAAQC,IAAI,UAAWe,GAChBA,IAIThB,QAAQC,IAAI,QAASW,EAAOL,MAS9B,IAKIU,EALW,SAA8BC,GAC3C,IAAIhB,EAAMiB,KAAKC,MAAsB,IAAhBD,KAAKE,UAC1B,OAAO,EAAP,KAGkB,CAAEd,KAAM,QAASC,IAAK,KAHzB,CAAEN,IAAG,IAGToB,GACbtB,QAAQC,IAAIgB,EAAOT,KAKnB,IAAMe,EAAW,SAAOC,EAAUjB,GAChCP,QAAQC,IAAIuB,IAGdD,EAAyB,SACzBA,EAAyB,GAwBzBvB,QAAQC,IAZ2B,CACjCC,IAAK,MACLuB,aAAc,SACdC,KAAM,gBAUR1B,QAAQC,IAP4B,CAClCC,IAAK,MACLuB,aAAc,SACdC,KAAM,CAAC,gBAAiB,mBAmC1B1B,QAAQC,IANiB,CACvB0B,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,UAAW,KAUb,IAcIC,EAQCC,EAtBCC,EAA4B,CAChCC,GAAI,UACJC,UAAW,IAAIC,KAAKA,KAAKC,OACzBC,QAAS,IAEXtC,QAAQC,IAAIgC,IAUZF,EAAQ,IACFvB,IAAM,GACZuB,EAAMxB,KAAO,QACbP,QAAQC,IAAI8B,GAIZ,SAAKC,GAAe,mBAAM,uBAAQ,mBAAM,2BAAU,uBAAlD,CAAKA,IAAAA,EAAY,KAEjBhC,QAAQC,IAAI+B,EAAaO,QAqBzBvC,QAAQC,IAPyB,CAC/BiC,GAAI,gBACJ3B,KAAM,MACNC,IAAK,GACLgC,WAAW,OChNO,O","sources":["webpack://typescript/./src/summary.ts","webpack://typescript/webpack/startup"],"sourcesContent":["// arrays\nlet characters: string[] = [];\ncharacters.push('hello');\ncharacters.push('world');\nconsole.log('characters: ', characters);\n\n\n// unions for multi-type variables\nlet mixed: (string | number)[] = [];\nmixed.push('hello');\nmixed.push(20);\nconsole.log('mixed:', mixed);\n\nlet uid: string | number;\nuid = 13;\nconsole.log(uid);\nuid = '12345';\nconsole.log(uid);\n\n// objects, the properties can not be changed once defined\nlet ninjaOne: {\n  name: string,\n  age: number,\n  belt: string;\n};\nninjaOne = { name: 'xjy', age: 22, belt: 'black' };\nconsole.log(ninjaOne);\n\n\n// functions & type aliases (the first two lines)\ntype StringOrNum = string | number;\ntype objWithNameUID = { name: string, uid: StringOrNum; };\ntype functionalType = (id: string, savings: BigInteger, checking: BigInteger) => boolean;\n\nlet greet: (user: objWithNameUID) => void;\nlet add: (a: number, b: number) => void;\nlet minus: (a: number, b: number) => number;\n\ngreet = (user: objWithNameUID): void => {\n  console.log(`${user.name} | ${user.uid}`);\n};\n\ngreet({ name: 'xjy', uid: 1537572 });\n\n\nadd = (a: number, b: number, c: number | string = 20): void => {\n  console.log(a + b + Number(c));\n};\n\nadd(5, 10);\n\nminus = (a: number, b: number): number => {\n  return a - b;\n};\n\nlet result = minus(10, 7);\nconsole.log(result);\n\n\n// interface: a blueprint\ninterface IsPerson {\n  name: string;\n  age: number;\n\n  speak(a: string): void;\n\n  spend(a: number): number;\n}\n\nconst me: IsPerson = {\n  name: 'xjy',\n  age: 30,\n  speak(text: string) {\n    console.log(text);\n  },\n  spend(amount: number) {\n    console.log('I spent', amount);\n    return amount;\n  }\n};\nconst greetperson = (person: IsPerson) => {\n  console.log('hello', person.name);\n};\n\ngreetperson(me);\n\n\n// generics\n// capture whatever item we pass in the function\n// I need to pass a object with a property called name\nconst addUID = <T extends { name: string; }>(obj: T) => {\n  let uid = Math.floor(Math.random() * 100);\n  return { ...obj, uid };\n};\n\nlet docOne = addUID({ name: 'yoshi', age: 40 });\nconsole.log(docOne.age);\n\n\n// generics\n// specify the type of input when calling a generic function\nconst printAny = <T, U>(state: T, name: U) => {\n  console.log(state);\n};\n\nprintAny<string, string>(\"hello\", \"me\");\nprintAny<number, string>(1, \"me\");\n\n\n// generics\n// make an interface field flexible\n// the data property can be any data type\ninterface Resource<T> {\n  uid: number;\n  resourceName: string;\n  data: T;\n}\n\nconst docThree: Resource<String> = {\n  uid: 12345,\n  resourceName: 'person',\n  data: 'string data'\n};\n\nconst docFour: Resource<string[]> = {\n  uid: 12345,\n  resourceName: 'person',\n  data: ['string data 1', 'string data 2']\n};\n\nconsole.log(docThree);\nconsole.log(docFour);\n\n\n// extends & types example\ninterface Vector1D {\n  x: number;\n};\n\ninterface Vector2D {\n  x: number,\n  y: number;\n}\n\ntype subTypeOf<T, U> = T extends U ? true : false;\n\nconst var1: subTypeOf<Vector2D, Vector1D> = true;\nconst var2: subTypeOf<Vector1D, Vector1D> = true;\nconst var3: subTypeOf<Vector1D, Vector2D> = false;\n\n\n// dynamic interfaces/ objects\ninterface IDynamicObj {\n  [index: string]: number;\n}\n\nconst id1: IDynamicObj = {\n  k1: 1,\n  k2: 2,\n  k3: 5,\n  helloWord: 15\n};\nconsole.log(id1);\n\ninterface IOptionalObj {\n  id: string,\n  birthDate: Date;\n  avatar?: string;\n  tropies: string[];\n};\nconst optionalObj: IOptionalObj = {\n  id: \"3d2ce32\",\n  birthDate: new Date(Date.now()),\n  tropies: []\n};\nconsole.log(optionalObj);\n\n\n// as keyword\ninterface newInterface {\n  name: string;\n  age: number;\n}\n\nlet hello: newInterface;\nhello = {} as newInterface;\nhello.age = 12;\nhello.name = \"hello\";\nconsole.log(hello);\n\n\n// enums : 0, 1, ,2, 3, 4\nenum ResourceType { BOOK, AUTHOR, FILM, DIRECTOR, PERSON }\n\nconsole.log(ResourceType.AUTHOR);\n\n\n// & operator on 2 interfaces\ninterface Base1 {\n  name: string;\n  age: number;\n}\n\ninterface Base2 {\n  id: string,\n  isMarried: boolean;\n}\n\nconst mixedBase: Base1 & Base2 = {\n  id: \"3r23f0jewfewf\",\n  name: \"xjy\",\n  age: 12,\n  isMarried: false\n};\n\nconsole.log(mixedBase);","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[84]();\n"],"names":["characters","push","console","log","uid","ninjaOne","c","user","mixed","name","age","belt","a","Number","person","speak","text","spend","amount","docOne","obj","Math","floor","random","addUID","printAny","state","resourceName","data","k1","k2","k3","helloWord","hello","ResourceType","optionalObj","id","birthDate","Date","now","tropies","AUTHOR","isMarried"],"sourceRoot":""}